shipit-v2, host, header, footer, templates, job, inventories, repositories, users, and keys


shipit-v2/
├── host/
├── header/
├── footer/
├── templates/
├── job/
├── inventories/
├── repositories/
├── users/
└── keys/


mkdir shipit-v2
cd shipit-v2
pnpm init

touch pnpm-workspace.yaml

npx create-react-app host --template redux --use-pnpm
npx create-react-app header --template redux --use-pnpm
npx create-react-app footer --template redux --use-pnpm
npx create-react-app templates --template redux --use-pnpm
npx create-react-app job --template redux --use-pnpm
npx create-react-app inventories --template redux --use-pnpm
npx create-react-app repositories --template redux --use-pnpm
npx create-react-app users --template redux --use-pnpm
npx create-react-app keys --template redux --use-pnpm

pnpm add webpack webpack-cli webpack-dev-server css-loader style-loader babel-loader file-loader sass-loader url-loader @svgr/webpack -w

pnpm add @reduxjs/toolkit react-redux redux-thunk -w

pnpm add layer -w

pnpm add jest @testing-library/react @testing-library/jest-dom -w

pnpm add react-error-boundary -w

pnpm add style-loader css-loader postcss postcss-loader postcss-import postcss-preset-env @csstools/postcss-cascade-layers -D -w

pnpm add postcss postcss-import postcss-preset-env @csstools/postcss-cascade-layers -D -w

pnpm add concurrently -D

pnpm add @svgr/webpack file-loader -D

pnpm add copy-webpack-plugin -D

pnpm add webpack webpack-cli webpack-dev-server css-loader style-loader babel-loader file-loader sass-loader url-loader @svgr/webpack -w

pnpm add eslint-config-react-app -w


Consolidated pnpm add commands

pnpm add @reduxjs/toolkit react-redux redux-thunk layer react-error-boundary eslint-config-react-app -w


pnpm add webpack webpack-cli webpack-dev-server css-loader style-loader babel-loader file-loader sass-loader url-loader @svgr/webpack jest @testing-library/react @testing-library/jest-dom postcss postcss-loader postcss-import postcss-preset-env @csstools/postcss-cascade-layers concurrently copy-webpack-plugin -D -w





or all at once 

pnpm add webpack webpack-cli webpack-dev-server css-loader style-loader babel-loader file-loader sass-loader url-loader @svgr/webpack @reduxjs/toolkit react-redux redux-thunk layer jest @testing-library/react @testing-library/jest-dom -w

touch webpack.common.js webpack.dev.js webpack.prod.js

const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");

module.exports = {
  entry: "./src/index.js",
  output: {
    filename: "bundle.js",
    path: path.resolve(__dirname, "dist"),
    publicPath: "auto",
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-react"],
          },
        },
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"],
      },
      {
        test: /\.(png|jpe?g|gif|svg)$/,
        use: [
          {
            loader: "file-loader",
            options: {
              name: "[name].[hash].[ext]",
              outputPath: "images",
            },
          },
        ],
      },
      {
        test: /\.s[ac]ss$/i,
        use: ["style-loader", "css-loader", "sass-loader"],
      },
      {
        test: /\.svg$/,
        use: ["@svgr/webpack"],
      },
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        use: ["url-loader"],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html",
    }),
  ],
};


Host 

touch webpack.config.js

root package.json


// Root

webpack.common.js

const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");

module.exports = {
  entry: "./src/index.js",
  output: {
    filename: "bundle.js",
    path: path.resolve(__dirname, "dist"),
    publicPath: "auto",
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-react"],
          },
        },
      },
      {
        test: /\.(png|jpe?g|gif)$/,
        type: "asset",
      },
      {
        test: /\.svg$/,
        use: ["@svgr/webpack", "url-loader"],
      },
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        type: "asset/resource",
      },
    ],
  },
  resolve: {
    extensions: [".js", ".jsx"],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html",
      favicon: "./public/favicon.ico",
    }),
  ],
};


webpack.dev.js

const { merge } = require("webpack-merge");
const commonConfig = require("./webpack.common.js");
const path = require("path");

module.exports = merge(commonConfig, {
  mode: "development",
  devtool: "source-map",
  devServer: {
    static: {
      directory: path.join(__dirname, "public"),
    },
    historyApiFallback: true,
  },
});

webpack.prod.js

const { merge } = require("webpack-merge");
const commonConfig = require("./webpack.common.js");
const path = require("path");

module.exports = merge(commonConfig, {
  mode: "production",
  output: {
    filename: "bundle.[contenthash].js",
    path: path.resolve(__dirname, "dist"),
    clean: true,
  },
});


postcss.config.js

module.exports = {
  plugins: {
    "postcss-import": {},
    "postcss-preset-env": {
      stage: 1,
      features: {
        "nesting-rules": true,
      },
    },
    "@csstools/postcss-cascade-layers": {},
  },
};

pnpm-workspace.yaml

packages:
  - 'host'
  - 'header'
  - 'footer'
  - 'templates'
  - 'job'
  - 'inventories'
  - 'repositories'
  - 'users'
  - 'keys'

package.json

{
  "name": "shipit-v2",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "concurrently \"pnpm --filter host run start\" \"pnpm --filter footer run start\"",
    "build": "pnpm --filter host run build && pnpm --filter footer run build && webpack",
    "serve": "webpack serve",
    "clean": "pnpm --filter host run clean && pnpm --filter footer run clean && rm -rf dist",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.7",
    "@svgr/webpack": "^8.1.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "babel-loader": "^9.1.3",
    "css-loader": "^7.1.2",
    "eslint-config-react-app": "^7.0.1",
    "file-loader": "^6.2.0",
    "jest": "^29.7.0",
    "layer": "^0.1.0",
    "react-error-boundary": "^4.0.13",
    "react-redux": "^8.1.3",
    "redux-thunk": "^3.1.0",
    "sass-loader": "^14.2.1",
    "style-loader": "^4.0.0",
    "url-loader": "^4.1.1",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4",
    "webpack-merge": "^5.8.0"
  },
  "devDependencies": {
    "@csstools/postcss-bundler": "^1.0.0",
    "@csstools/postcss-cascade-layers": "^1.1.1",
    "autoprefixer": "^10.4.7",
    "clean-webpack-plugin": "^4.0.0",
    "concurrently": "^8.0.1",
    "copy-webpack-plugin": "^12.0.2",
    "postcss": "^8.4.38",
    "postcss-import": "^16.1.0",
    "postcss-loader": "^7.0.0",
    "postcss-preset-env": "^9.5.14"
  }
}


.eslintrc.js(same for root, host and other clients)

module.exports = {
  extends: ["react-app"],
};


/////////////////////////////////////////// footer start ///////////////////////////////////////////

components

ErrorBoundary.js(common for all the apps)

import React from "react";
import { ErrorBoundary as ReactErrorBoundary } from "react-error-boundary";

const ErrorFallback = ({ error, resetErrorBoundary }) => {
  return (
    <div role="alert">
      <p>Something went wrong:</p>
      <pre>{error.message}</pre>
      <button onClick={resetErrorBoundary}>Try again</button>
    </div>
  );
};

const ErrorBoundary = ({ children }) => {
  return (
    <ReactErrorBoundary
      FallbackComponent={ErrorFallback}
      onReset={() => {
        // reset the state of your application so the error doesn't happen again
      }}
    >
      {children}
    </ReactErrorBoundary>
  );
};

export default ErrorBoundary;

Footer.jsx

import React from "react";
import ErrorBoundary from "./ErrorBoundary";

const Footer = () => {
  return (
    <ErrorBoundary>
      <div className="footer-wrapper">
        <h1>Footer App</h1>
      </div>
    </ErrorBoundary>
  );
};

export default Footer;

footer app.css

/* Define layers */
@layer base, components, utilities;

/* Define CSS Variables */
@layer base {
  :root {
    --primary-bg-color: aquamarine;
    --primary-text-color: #ffffff;
    --border-color: #e9ecef;
    --padding: 20px;
    --font-size: 14px;
    --body-font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    --code-font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
      monospace;
  }
}

/* Base styles */
@layer base {
  body {
    margin: 0;
    font-family: var(--body-font-family);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  code {
    font-family: var(--code-font-family);
  }
}

/* Component styles */
@layer components {
  .footer-wrapper {
    background-color: var(--primary-bg-color);
    padding: var(--padding) 0;
    text-align: center;
    font-size: var(--font-size);
    color: var(--primary-text-color);
    border-top: 1px solid var(--border-color);
  }
}

/* Utility styles */
@layer utilities {
  .text-center {
    text-align: center;
  }

  .m-0 {
    margin: 0;
  }
}

App.js
import React from "react";
import Footer from "./components/Footer.jsx";
import "./App.css";

function App() {
  return (
    <div className="App">
      <Footer />
    </div>
  );
}

export default App;

package.json
{
  "name": "footer",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.7",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.5.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-redux": "^8.1.3",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "webpack serve --config webpack.config.js --progress",
    "build": "webpack",
    "serve": "webpack serve --config webpack.config.js --progress",
    "clean": "rm -rf dist"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@csstools/postcss-cascade-layers": "^4.0.6",
    "postcss": "^8.4.38",
    "postcss-import": "^16.1.0",
    "postcss-preset-env": "^9.5.14"
  }
}

webpack.config.js

const path = require("path");
const { merge } = require("webpack-merge");
const commonConfig = require("../webpack.common.js");
const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const webpack = require("webpack");

module.exports = merge(commonConfig, {
  mode: "development",
  devServer: {
    port: 3002,
    static: {
      directory: path.join(__dirname, "public"),
    },
    headers: {
      "Access-Control-Allow-Origin": "*",
    },
    historyApiFallback: true,
    client: {
      overlay: {
        warnings: false,
        errors: false,
      },
    },
  },
  output: {
    publicPath: "http://localhost:3002/",
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [
          "style-loader",
          {
            loader: "css-loader",
            options: { importLoaders: 1 },
          },
          {
            loader: "postcss-loader",
            options: {
              postcssOptions: {
                plugins: [
                  "postcss-import",
                  "postcss-preset-env",
                  "@csstools/postcss-cascade-layers",
                ],
              },
            },
          },
        ],
      },
      {
        test: /\.s[ac]ss$/i,
        use: ["style-loader", "css-loader", "sass-loader"],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html",
      favicon: "./public/favicon.ico",
    }),
    new ModuleFederationPlugin({
      name: "footer",
      filename: "remoteEntry.js",
      exposes: {
        "./Footer": "./src/components/Footer.jsx",
        "./FooterStyles": "./src/App.css",
      },
      shared: {
        react: {
          singleton: true,
          eager: true,
          requiredVersion: "^18.3.1",
        },
        "react-dom": {
          singleton: true,
          eager: true,
          requiredVersion: "^18.3.1",
        },
      },
    }),
    new webpack.HotModuleReplacementPlugin(),
  ],
  resolve: {
    modules: [path.resolve(__dirname, "node_modules"), "node_modules"],
  },
});

webpack.dev.js
const { merge } = require("webpack-merge");
const commonConfig = require("../webpack.common.js");
const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");
const path = require("path");

module.exports = merge(commonConfig, {
  mode: "development",
  devServer: {
    port: 3002, // Port for footer application
    static: {
      directory: path.join(__dirname, "public"),
    },
    headers: {
      "Access-Control-Allow-Origin": "*",
    },
    historyApiFallback: true,
  },
  output: {
    publicPath: "http://localhost:3002/",
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [
          "style-loader",
          {
            loader: "css-loader",
            options: { importLoaders: 1 },
          },
          {
            loader: "postcss-loader",
            options: {
              postcssOptions: {
                plugins: [
                  "@csstools/postcss-bundler",
                  "@csstools/postcss-cascade-layers",
                ],
              },
            },
          },
        ],
      },
      {
        test: /\.s[ac]ss$/i,
        use: ["style-loader", "css-loader", "sass-loader"],
      },
    ],
  },
  plugins: [
    new ModuleFederationPlugin({
      name: "footer",
      filename: "remoteEntry.js",
      exposes: {
        "./Footer": "./src/components/Footer.jsx",
        "./FooterStyles": "./src/App.css",
      },
      shared: {
        react: {
          singleton: true,
          requiredVersion: "^18.3.1",
        },
        "react-dom": {
          singleton: true,
          requiredVersion: "^18.3.1",
        },
      },
    }),
    new webpack.HotModuleReplacementPlugin(),
  ],
  resolve: {
    modules: [path.resolve(__dirname, "node_modules"), "node_modules"],
  },
});


/////////////////////////////////////////// footer ends ///////////////////////////////////////////


/////////////////////////////////////////// host starts ///////////////////////////////////////////

App.js
import React, { Suspense, useEffect } from "react";
import ErrorBoundary from "./components/ErrorBoundary";
import "./App.css";

const Footer = React.lazy(() => import("footer/Footer"));

const App = () => {
  useEffect(() => {
    const loadStyles = async () => {
      try {
        await import("footer/FooterStyles");
      } catch (e) {
        console.error(">>>> Failed to load styles:", e);
      }
    };
    loadStyles();
  }, []);

  return (
    <div className="host-wrapper">
      <h1>Host App</h1>
      <ErrorBoundary>
        <Suspense fallback={<div>Loading Footer...</div>}>
          <Footer />
        </Suspense>
      </ErrorBoundary>
    </div>
  );
};

export default App;


package.json

{
  "name": "host",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.7",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.5.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-redux": "^8.1.3",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "webpack serve --config webpack.config.js --progress",
    "build": "webpack",
    "serve": "webpack serve --config webpack.config.js --progress",
    "clean": "rm -rf dist"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

webpack.config.js
const path = require("path");
const { merge } = require("webpack-merge");
const commonConfig = require("../webpack.common.js");
const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const webpack = require("webpack");

module.exports = merge(commonConfig, {
  mode: "development",
  devServer: {
    port: 3000,
    static: {
      directory: path.join(__dirname, "public"),
    },
    headers: {
      "Access-Control-Allow-Origin": "*",
    },
    historyApiFallback: true,
    client: {
      overlay: {
        warnings: false,
        errors: false,
      },
    },
  },
  output: {
    publicPath: "http://localhost:3000/",
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [
          "style-loader",
          {
            loader: "css-loader",
            options: { importLoaders: 1 },
          },
          {
            loader: "postcss-loader",
            options: {
              postcssOptions: {
                plugins: [
                  "postcss-import",
                  "postcss-preset-env",
                  "@csstools/postcss-cascade-layers",
                ],
              },
            },
          },
        ],
      },
      {
        test: /\.s[ac]ss$/i,
        use: ["style-loader", "css-loader", "sass-loader"],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html",
      favicon: "./public/favicon.ico",
    }),
    new ModuleFederationPlugin({
      name: "host",
      remotes: {
        footer: "footer@http://localhost:3002/remoteEntry.js",
      },
      shared: {
        react: {
          singleton: true,
          eager: true,
          requiredVersion: "^18.3.1",
        },
        "react-dom": {
          singleton: true,
          eager: true,
          requiredVersion: "^18.3.1",
        },
      },
    }),
    new webpack.HotModuleReplacementPlugin(),
  ],
  resolve: {
    modules: [path.resolve(__dirname, "node_modules"), "node_modules"],
  },
});


webpack.dev.js

const { merge } = require("webpack-merge");
const commonConfig = require("../webpack.common.js");
const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");
const path = require("path");

module.exports = merge(commonConfig, {
  mode: "development",
  devServer: {
    port: 3000,
    static: {
      directory: path.join(__dirname, "public"),
    },
    headers: {
      "Access-Control-Allow-Origin": "*",
    },
    historyApiFallback: true,
  },
  output: {
    publicPath: "http://localhost:3000/",
  },
  plugins: [
    new ModuleFederationPlugin({
      name: "host",
      remotes: {
        footer: "footer@http://localhost:3002/remoteEntry.js",
      },
      shared: {
        react: {
          singleton: true,
          requiredVersion: "^18.3.1",
        },
        "react-dom": {
          singleton: true,
          requiredVersion: "^18.3.1",
        },
      },
    }),
    new webpack.HotModuleReplacementPlugin(),
  ],
  resolve: {
    modules: [path.resolve(__dirname, "node_modules"), "node_modules"],
  },
});
